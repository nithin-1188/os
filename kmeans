import numpy as np
from sklearn.cluster import KMeans
from scipy.stats import mode

# Data
data = np.array([
    [1.713, 1.586],
    [0.180, 1.786],
    [0.353, 1.240],
    [0.940, 1.566],
    [1.486, 0.759],
    [1.266, 1.106],
    [1.540, 0.419],
    [0.459, 1.799],
    [0.773, 0.186]
])

classes = np.array([0, 1, 1, 0, 1, 0, 1, 1, 1])

# Perform k-means clustering
kmeans = KMeans(n_clusters=3, random_state=0)
clusters = kmeans.fit_predict(data)

# Determine the dominant class in each cluster
cluster_classes = np.zeros(kmeans.n_clusters)
for i in range(kmeans.n_clusters):
    cluster_indices = np.where(clusters == i)
    cluster_class = mode(classes[cluster_indices])[0]  # Take the most common class
    cluster_classes[i] = cluster_class

# Predict for a given VAR1 and VAR2
new_point = np.array([[0.906, 0.606]])
cluster_label = kmeans.predict(new_point)
predicted_class = cluster_classes[cluster_label[0]]

print(f"The predicted class for VAR1=0.906 and VAR2=0.606 is {int(predicted_class)}.")


