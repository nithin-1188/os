#include <stdio.h>

int main() {
    int n, tq, i;
    float awt = 0, atat = 0;

    printf("Enter number of processes: ");
    scanf("%d", &n);
    int pid[n], at[n], bt[n], rt[n], ct[n], tat[n], wt[n];
    int completed = 0, time = 0;

    for(i = 0; i < n; i++) {
        pid[i] = i+1;
        printf("Enter Arrival Time and Burst Time for P%d: ", i+1);
        scanf("%d %d", &at[i], &bt[i]);
        rt[i] = bt[i]; // Remaining time
    }

    printf("Enter Time Quantum: ");
    scanf("%d", &tq);

    int queue[n], front = 0, rear = 0, visited[n];
    for(i = 0; i < n; i++) visited[i] = 0;

    // Add first process to queue
    queue[rear++] = 0;
    visited[0] = 1;

    while(completed < n) {
        int idx = queue[front++];
        if(at[idx] > time) time = at[idx];

        int exec_time = (rt[idx] >= tq) ? tq : rt[idx];
        rt[idx] -= exec_time;
        time += exec_time;

        // Add newly arrived processes to queue
        for(i = 0; i < n; i++) {
            if(i != idx && at[i] <= time && !visited[i] && rt[i] > 0) {
                queue[rear++] = i;
                visited[i] = 1;
            }
        }

        if(rt[idx] > 0) queue[rear++] = idx; // Re-queue current process
        else {
            ct[idx] = time;
            tat[idx] = ct[idx] - at[idx];
            wt[idx] = tat[idx] - bt[idx];
            atat += tat[idx];
            awt += wt[idx];
            completed++;
        }

        if(front == rear && completed < n) { // CPU idle: pick next available process
            for(i = 0; i < n; i++) {
                if(rt[i] > 0) {
                    queue[rear++] = i;
                    visited[i] = 1;
                    break;
                }
            }
        }
    }

    printf("\nPID\tAT\tBT\tCT\tTAT\tWT\n");
    for(i = 0; i < n; i++)
        printf("P%d\t%d\t%d\t%d\t%d\t%d\n", pid[i], at[i], bt[i], ct[i], tat[i], wt[i]);

    printf("\nAverage WT = %.2f", awt/n);
    printf("\nAverage TAT = %.2f\n", atat/n);
    return 0;
}
